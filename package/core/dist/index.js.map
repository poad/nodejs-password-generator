{"version":3,"sources":["../src/index.ts"],"names":["crypto","window","globalThis","generatePassword","length","generatePasswordWithOptions","includeUpperCase","includeLowerCase","includeDigits","includeSymbols","options","upperCase","lowerCase","digits","symbols","charsets","filter","Boolean","undefined","allChars","join","getRandomChar","charset","array","Uint32Array","getRandomValues","requiredChars","Promise","all","map","remainingChars","Array","fill","shuffle","result","randomArray","_","index","arr","randomIndex","randomValue","shuffled"],"mappings":"AAAA;;;CAGC,GACD,MAAMA,SAAS,OAAOC,WAAW,cAAcA,OAAOD,MAAM,GAAGE,WAAWF,MAAM;AAEhF;;;;;;CAMC,GACD,eAAeG,iBAAiBC,SAAS,EAAE;IACzC,OAAOC,4BAA4B;QACjCD;QACAE,kBAAkB;QAClBC,kBAAkB;QAClBC,eAAe;QACfC,gBAAgB;IAClB;AACF;AAoBA;;;;;;;;;;;;;;;;;;;;;CAqBC,GACD,eAAeJ,4BAA4BK,UAA2B;IAAEN,QAAQ;AAAG,CAAC;IAClF,gBAAgB;IAChB,MAAMO,YAAY;IAClB,MAAMC,YAAY;IAClB,MAAMC,SAAS;IACf,MAAMC,UAAU;IAEhB,aAAa;IACb,MAAM,EACJV,SAAS,EAAE,EACXE,mBAAmB,IAAI,EACvBC,mBAAmB,IAAI,EACvBC,gBAAgB,IAAI,EACpBC,iBAAiB,IAAI,EACtB,GAAGC;IAEJ,eAAe;IACf,MAAMK,WAAW;QACfT,oBAAoBK;QACpBJ,oBAAoBK;QACpBJ,iBAAiBK;QACjBJ,kBAAkBK;KACnB,CAACE,MAAM,CAACC;IAET,IAAIF,SAASX,MAAM,KAAK,GAAG;QACzB,OAAOc;IACT;IAEA,MAAMC,WAAWJ,SAASK,IAAI,CAAC;IAE/B;;;;;KAKG,GACH,MAAMC,gBAAgB,OAAOC;QAC3B,MAAMC,QAAQ,IAAIC,YAAY;QAC9BxB,OAAOyB,eAAe,CAACF;QACvB,OAAOD,OAAO,CAACC,KAAK,CAAC,EAAE,GAAGD,QAAQlB,MAAM,CAAC;IAC3C;IAEA,8BAA8B;IAC9B,MAAMsB,gBAAgB,MAAMC,QAAQC,GAAG,CACrCb,SAASc,GAAG,CAACP,CAAAA,UAAWD,cAAcC;IAGxC,WAAW;IACX,MAAMQ,iBAAiB,MAAMH,QAAQC,GAAG,CACtCG,MAAM3B,SAASsB,cAActB,MAAM,EAChC4B,IAAI,CAAC,MACLH,GAAG,CAAC,IAAMR,cAAcF;IAG7B;;;;;KAKG,GACH,MAAMc,UAAU,OAAUV;QACxB,MAAMW,SAAS;eAAIX;SAAM;QACzB,MAAMY,cAAc,IAAIX,YAAYU,OAAO9B,MAAM;QACjDJ,OAAOyB,eAAe,CAACU;QACvB,OAAOD,OAAOL,GAAG,CAAC,CAACO,GAAGC,OAAOC;YAC3B,MAAMC,cAAcF,QAASF,WAAW,CAACE,MAAM,GAAIC,CAAAA,IAAIlC,MAAM,GAAGiC,KAAI;YACpE,MAAMG,cAAcF,GAAG,CAACC,YAAY;YACpCD,GAAG,CAACC,YAAY,GAAGD,GAAG,CAACD,MAAM;YAC7B,OAAOG;QACT;IACF;IAEA,mBAAmB;IACnB,MAAMC,WAAW,MAAMR,QAAQ;WAAIP;WAAkBI;KAAe;IACpE,OAAOW,SAASrB,IAAI,CAAC;AACvB;AAEA,eAAe;IACbjB;IACAE;AACF,EAAE","file":"index.js","sourcesContent":["/**\n * クロスプラットフォーム対応のための暗号化API参照\n * ブラウザ環境とNode.js環境の両方で動作するように設定\n */\nconst crypto = typeof window !== 'undefined' ? window.crypto : globalThis.crypto;\n\n/**\n * デフォルトのパスワード生成関数\n * すべての文字種（大文字、小文字、数字、記号）を含むパスワードを生成\n *\n * @param length - パスワードの長さ（デフォルト: 16文字）\n * @returns 生成されたパスワード文字列、または生成失敗時はundefined\n */\nasync function generatePassword(length = 16): Promise<string | undefined> {\n  return generatePasswordWithOptions({\n    length,\n    includeUpperCase: true,\n    includeLowerCase: true,\n    includeDigits: true,\n    includeSymbols: true,\n  });\n};\n\n/**\n * パスワード生成のオプション設定用インターフェース\n */\ninterface PasswordOptions {\n  /** パスワードの長さ */\n  length: number;\n  /** 大文字を含めるかどうか */\n  includeUpperCase?: boolean;\n  /** 小文字を含めるかどうか */\n  includeLowerCase?: boolean;\n  /** 数字を含めるかどうか */\n  includeDigits?: boolean;\n  /** 記号を含めるかどうか */\n  includeSymbols?: boolean;\n  /** カスタム記号セット（未実装） */\n  customSymbols?: string;\n}\n\n/**\n * カスタマイズ可能なパスワード生成関数\n *\n * @param options - パスワード生成オプション\n * @returns 生成されたパスワード文字列、または生成失敗時はundefined\n *\n * @remarks\n * - 暗号学的に安全な乱数生成を使用\n * - 選択された各文字種から最低1文字を含むことを保証\n * - 最終的なパスワードはランダムにシャッフル\n *\n * @example\n * ```typescript\n * const password = await generatePasswordWithOptions({\n *   length: 12,\n *   includeUpperCase: true,\n *   includeLowerCase: true,\n *   includeDigits: false,\n *   includeSymbols: true\n * });\n * ```\n */\nasync function generatePasswordWithOptions(options: PasswordOptions = { length: 16 }): Promise<string | undefined> {\n  // 使用可能な文字セットの定義\n  const upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowerCase = 'abcdefghijklmnopqrstuvwxyz';\n  const digits = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n\n  // デフォルトオプション\n  const {\n    length = 16,\n    includeUpperCase = true,\n    includeLowerCase = true,\n    includeDigits = true,\n    includeSymbols = true,\n  } = options;\n\n  // 使用する文字セットを構築\n  const charsets = [\n    includeUpperCase && upperCase,\n    includeLowerCase && lowerCase,\n    includeDigits && digits,\n    includeSymbols && symbols,\n  ].filter(Boolean) as string[];\n\n  if (charsets.length === 0) {\n    return undefined;\n  }\n\n  const allChars = charsets.join('');\n\n  /**\n     * 指定された文字セットからランダムな1文字を生成\n     *\n     * @param charset - 文字セット\n     * @returns ランダムに選択された1文字\n     */\n  const getRandomChar = async (charset: string): Promise<string> => {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return charset[array[0] % charset.length];\n  };\n\n  // 必須文字の生成（選択された各文字セットから1文字ずつ）\n  const requiredChars = await Promise.all(\n    charsets.map(charset => getRandomChar(charset)),\n  );\n\n  // 残りの文字を生成\n  const remainingChars = await Promise.all(\n    Array(length - requiredChars.length)\n      .fill(null)\n      .map(() => getRandomChar(allChars)),\n  );\n\n  /**\n     * 配列の要素をランダムにシャッフル\n     *\n     * @param array - シャッフルする配列\n     * @returns シャッフルされた新しい配列\n     */\n  const shuffle = async <T>(array: T[]): Promise<T[]> => {\n    const result = [...array];\n    const randomArray = new Uint32Array(result.length);\n    crypto.getRandomValues(randomArray);\n    return result.map((_, index, arr) => {\n      const randomIndex = index + (randomArray[index] % (arr.length - index));\n      const randomValue = arr[randomIndex];\n      arr[randomIndex] = arr[index];\n      return randomValue;\n    });\n  };\n\n  // すべての文字を結合してシャッフル\n  const shuffled = await shuffle([...requiredChars, ...remainingChars]);\n  return shuffled.join('');\n};\n\nexport default {\n  generatePassword,\n  generatePasswordWithOptions,\n};\n"]}