{"version":3,"sources":["../src/index.ts"],"names":[],"mappings":"AAAA,MAAM,SAAS,OAAO,WAAW,cAAc,OAAO,MAAM,GAAG,WAAW,MAAM;AAEhF,eAAe,iBAAiB,SAAiB,EAAE;IACjD,OAAO,4BAA4B;QACjC;QACA,kBAAkB;QAClB,kBAAkB;QAClB,eAAe;QACf,gBAAgB;IAClB;AACF;AAWA,eAAe,4BAA4B,UAA2B;IAAE,QAAQ;AAAG,CAAC;IAClF,MAAM,YAAY;IAClB,MAAM,YAAY;IAClB,MAAM,SAAS;IACf,MAAM,UAAU;IAEhB,aAAa;IACb,MAAM,EACJ,SAAS,EAAE,EACX,mBAAmB,IAAI,EACvB,mBAAmB,IAAI,EACvB,gBAAgB,IAAI,EACpB,iBAAiB,IAAI,EACtB,GAAG;IAEJ,eAAe;IACf,MAAM,WAAW;QACf,oBAAoB;QACpB,oBAAoB;QACpB,iBAAiB;QACjB,kBAAkB;KACnB,CAAC,MAAM,CAAC;IAET,IAAI,SAAS,MAAM,KAAK,GAAG;QACzB,OAAO;IACT;IAEA,MAAM,WAAW,SAAS,IAAI,CAAC;IAE/B,gBAAgB;IAChB,MAAM,gBAAgB,OAAO;QAC3B,MAAM,QAAQ,IAAI,YAAY;QAC9B,OAAO,eAAe,CAAC;QACvB,OAAO,OAAO,CAAC,KAAK,CAAC,EAAE,GAAG,QAAQ,MAAM,CAAC;IAC3C;IAEA,8BAA8B;IAC9B,MAAM,gBAAgB,MAAM,QAAQ,GAAG,CACrC,SAAS,GAAG,CAAC,CAAA,UAAW,cAAc;IAGxC,WAAW;IACX,MAAM,iBAAiB,MAAM,QAAQ,GAAG,CACtC,MAAM,SAAS,cAAc,MAAM,EAChC,IAAI,CAAC,MACL,GAAG,CAAC,IAAM,cAAc;IAG7B,UAAU;IACV,MAAM,UAAU,OAAU;QACxB,MAAM,SAAS;eAAI;SAAM;QACzB,MAAM,cAAc,IAAI,YAAY,OAAO,MAAM;QACjD,OAAO,eAAe,CAAC;QAEvB,OAAO,OAAO,GAAG,CAAC,CAAC,GAAG,OAAO;YAC3B,MAAM,cAAc,QAAS,WAAW,CAAC,MAAM,GAAI,CAAA,IAAI,MAAM,GAAG,KAAI;YACpE,MAAM,cAAc,GAAG,CAAC,YAAY;YACpC,GAAG,CAAC,YAAY,GAAG,GAAG,CAAC,MAAM;YAC7B,OAAO;QACT;IACF;IAEA,mBAAmB;IACnB,MAAM,WAAW,MAAM,QAAQ;WAAI;WAAkB;KAAe;IACpE,OAAO,SAAS,IAAI,CAAC;AACvB;AAEA,eAAe;IACb;IACA;AACF,EAAE","file":"index.js","sourcesContent":["const crypto = typeof window !== 'undefined' ? window.crypto : globalThis.crypto;\n\nasync function generatePassword(length: number = 16): Promise<string | undefined> {\n  return generatePasswordWithOptions({\n    length,\n    includeUpperCase: true,\n    includeLowerCase: true,\n    includeDigits: true,\n    includeSymbols: true\n  });\n};\n\ninterface PasswordOptions {\n  length: number;\n  includeUpperCase?: boolean;\n  includeLowerCase?: boolean;\n  includeDigits?: boolean;\n  includeSymbols?: boolean;\n  customSymbols?: string;\n}\n\nasync function generatePasswordWithOptions(options: PasswordOptions = { length: 16 }): Promise<string | undefined> {\n  const upperCase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const lowerCase = 'abcdefghijklmnopqrstuvwxyz';\n  const digits = '0123456789';\n  const symbols = '!@#$%^&*()_+-=[]{}|;:,.<>?';\n\n  // デフォルトオプション\n  const {\n    length = 16,\n    includeUpperCase = true,\n    includeLowerCase = true,\n    includeDigits = true,\n    includeSymbols = true,\n  } = options;\n\n  // 使用する文字セットを構築\n  const charsets = [\n    includeUpperCase && upperCase,\n    includeLowerCase && lowerCase,\n    includeDigits && digits,\n    includeSymbols && symbols,\n  ].filter(Boolean) as string[];\n\n  if (charsets.length === 0) {\n    return undefined;\n  }\n\n  const allChars = charsets.join('');\n\n  // 暗号学的に安全な乱数を生成\n  const getRandomChar = async (charset: string): Promise<string> => {\n    const array = new Uint32Array(1);\n    crypto.getRandomValues(array);\n    return charset[array[0] % charset.length];\n  };\n\n  // 必須文字の生成（選択された各文字セットから1文字ずつ）\n  const requiredChars = await Promise.all(\n    charsets.map(charset => getRandomChar(charset))\n  );\n\n  // 残りの文字を生成\n  const remainingChars = await Promise.all(\n    Array(length - requiredChars.length)\n      .fill(null)\n      .map(() => getRandomChar(allChars))\n  );\n\n  // シャッフル関数\n  const shuffle = async <T>(array: T[]): Promise<T[]> => {\n    const result = [...array];\n    const randomArray = new Uint32Array(result.length);\n    crypto.getRandomValues(randomArray);\n\n    return result.map((_, index, arr) => {\n      const randomIndex = index + (randomArray[index] % (arr.length - index));\n      const randomValue = arr[randomIndex];\n      arr[randomIndex] = arr[index];\n      return randomValue;\n    });\n  };\n\n  // すべての文字を結合してシャッフル\n  const shuffled = await shuffle([...requiredChars, ...remainingChars]);\n  return shuffled.join('');\n};\n\nexport default {\n  generatePassword,\n  generatePasswordWithOptions,\n};\n"]}